AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  vpcCIDR:
    Type: String
    Description: "VPC CIDR Block"
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/16
    Default: 10.103.0.0/16
  publicSubnetCIDR:
    Type: String
    Description: "Public Subnet CIDR Block"
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.103.0.0/22
  privateSubnetCIDR:
    Type: String
    Description: "Private Subnet CIDR Block"
    MinLength: 9
    MaxLength: 18
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Must be a valid CIDR range in the form x.x.x.x/22
    Default: 10.103.4.0/22
  internalNamespace:
    Type: String
    Default: internal
    Description: The namespace with which services are prepended (e.g. <service>.internal).

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true

  SubnetPublic:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref publicSubnetCIDR
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC

  SubnetPrivate:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref privateSubnetCIDR
      MapPublicIpOnLaunch: false
      VpcId: !Ref VPC

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociatePublic:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociatePrivate:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      SubnetId: !Ref SubnetPrivate

  IGW:
    Type: AWS::EC2::InternetGateway

  GatewayAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  RouteDefaultPublic:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttach
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTablePublic

  EIPNatGWA:
    DependsOn: GatewayAttach
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPNatGWA.AllocationId
      SubnetId: !Ref SubnetPublic

  RouteDefaultPrivate:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
      RouteTableId: !Ref RouteTablePrivate

  # Internal load balancer used for a services not directly accessible to the public.
  # Receives traffic from other services and from an API Gateway via a VPC Link.
  InternalNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true
      Subnets:
        - !Ref SubnetPrivate

  VPCSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allows the proxying of traffic from all sources within the network.
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      CidrIp: !GetAtt VPC.CidrBlock
      IpProtocol: "-1"

  # VPCLink:
  #   Type: AWS::ApiGatewayV2::VpcLink
  #   Properties:
  #     Name: ApiGatewayVpcLinkV2
  #     SecurityGroupIds:
  #       - !GetAtt VPC.DefaultSecurityGroup
  #     SubnetIds:
  #       - !Ref SubnetPrivate

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: shoutouts

  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: !Ref internalNamespace
      Description: Internal service discovery namespace.
      Vpc: !Ref VPC

  ServiceDiscoveryServiceSanitizer:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: sanitizer
      DnsConfig:
        DnsRecords: [{ Type: A, TTL: "10" }]
        NamespaceId: !Ref ServiceDiscoveryNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1

  # Role used for Autoscaling to inspect stats and adjust scalable targets.
  AutoscalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [application-autoscaling.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: service-autoscaling-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service-role
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Rules which allow ECS to attach network interfaces to instances
                  # on your behalf in order for awsvpc networking mode to work right
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"
                  # Rules which allow ECS to update load balancers on your behalf
                  # with the information sabout how to send traffic to your containers
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"

  # This is a role which is used by the ECS tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-task-execution-role-policy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  TaskIamRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: TaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "cloudwatch:PutMetricData"
                  - "events:PutEvents"
                Resource: "*"

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "ecs-tasks.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess

  RepositorySanitizer:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub shoutouts/sanitizer
      ImageScanningConfiguration:
        ScanOnPush: true

  LogGroupSanitizer:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: sanitizer
      RetentionInDays: 1

  TargetGroupSanitizer:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      TargetType: ip
      Protocol: TCP
      Port: 8080
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckPath: /health
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-399
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 5

  ListenerSanitizer:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref InternalNetworkLoadBalancer
      Protocol: TCP
      Port: 8080
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupSanitizer
          Type: forward

Outputs:
  TaskExecutionRole:
    Value: !GetAtt TaskExecutionRole.Arn
    Export:
      Name: shoutout-services-task-execution-role
  TaskIamRole:
    Value: !GetAtt TaskIamRole.Arn
    Export:
      Name: shoutout-services-task-iam-role
  TargetGroupSanitizer:
    Value: !Ref TargetGroupSanitizer
    Export:
      Name: shoutout-services-target-group-sanitizer
  ServiceDiscoveryServiceSanitizer:
    Value: !GetAtt ServiceDiscoveryServiceSanitizer.Arn
    Export:
      Name: shoutout-services-service-discovery-service-sanitizer
  LogGroupSanitizer:
    Value: !Ref LogGroupSanitizer
    Export:
      Name: shoutout-services-log-group-sanitizer
  Cluster:
    Value: !Ref Cluster
    Export:
      Name: shoutout-services-cluster
  SubnetPublic:
    Value: !Ref SubnetPublic
    Export:
      Name: shoutout-services-subnet-public
  SubnetPrivate:
    Value: !Ref SubnetPrivate
    Export:
      Name: shoutout-services-subnet-private
  VPCDefaultSecurityGroup:
    Description: Default VPC Security Group
    Value: !GetAtt VPC.DefaultSecurityGroup
    Export:
      Name: shoutout-services-vpc-default-security-group
