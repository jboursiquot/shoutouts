AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Shoutouts Slack Slash Command

Parameters:
  paramsStackName:
    Type: String
    Description: "Stack name where SSM/SecretsManager params are defined"
    Default: shoutouts-params

Globals:
  Api:
    Name: !Sub ${AWS::StackName}-agw

Resources:
  ShoutoutsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-shoutouts
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - 
          AttributeName: ID
          AttributeType: S
        -
          AttributeName: RecipientID
          AttributeType: S
      KeySchema:
        - 
          AttributeName: ID
          KeyType: HASH
      GlobalSecondaryIndexes:
        - 
          IndexName: RecipientIDIndex
          KeySchema: 
            - 
              AttributeName: RecipientID
              KeyType: HASH
          Projection: 
            ProjectionType: ALL

  ShoutoutsQueue:
    Type: AWS::SQS::Queue

  ShoutoutsQueueUrlParameter:
    Type: "AWS::SSM::Parameter"
    DependsOn: ShoutoutsQueue
    Properties:
      Name: !Sub "/${AWS::StackName}/queue-url"
      Type: "String"
      Value: !Ref ShoutoutsQueue
      Description: "Shoutouts Queue URL"

  ShoutoutsRole:
    Type: AWS::IAM::Role
    Description: Lambda execution role for all lambda functions.
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-policy
        PolicyDocument:
          Statement:
            - Effect: "Allow"
              Action: 
                - "states:StartExecution"
                - "cloudwatch:PutMetricData"
              Resource: "*"
            - Effect: "Allow"
              Action:
                - "sqs:DeleteMessage"
                - "sqs:DeleteMessageBatch"
                - "sqs:SendMessageBatch"
                - "sqs:SendMessage"
              Resource: !GetAtt ShoutoutsQueue.Arn
            - Effect: "Allow"
              Action:
                - "dynamodb:Query"
                - "dynamodb:Scan"
                - "dynamodb:BatchGetItem"
                - "dynamodb:BatchWriteItem"
                - "dynamodb:GetItem"
                - "dynamodb:PutItem"
                - "dynamodb:UpdateItem"
              Resource:
                - !GetAtt ShoutoutsTable.Arn
                - !Join [ "/", [!GetAtt ShoutoutsTable.Arn, "index", "*" ]]

  ShoutoutHandlerFunction:
    Type: AWS::Serverless::Function
    DependsOn: [ShoutoutsQueueUrlParameter, ShoutoutsRole]
    Properties:
      Role: !GetAtt ShoutoutsRole.Arn
      CodeUri: ../build/handler.zip
      Handler: handler
      Runtime: go1.x
      Tracing: Active
      MemorySize: 128
      Events:
        SlashCommand:
          Type: Api
          Properties:
            Path: /shoutout
            Method: POST
      Environment:
        Variables:
          SLACK_TOKEN: !Sub 
            - '{{resolve:secretsmanager:/${paramsStackName}/slack-token}}'
            - {paramsStackName: !Ref paramsStackName}
          QUEUE_URL: !GetAtt ShoutoutsQueueUrlParameter.Value
          TABLE_NAME: !Ref ShoutoutsTable

  ShoutoutProcessorFunction:
    Type: AWS::Serverless::Function
    DependsOn: ShoutoutsRole
    Properties:
      Role: !GetAtt ShoutoutsRole.Arn
      CodeUri: ../build/processor.zip
      Handler: processor
      Runtime: go1.x
      Tracing: Active
      MemorySize: 128
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt ShoutoutsQueue.Arn
            BatchSize: 10
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref ShoutoutsStateMachine

  ShoutoutSaverFunction:
    Type: AWS::Serverless::Function
    DependsOn: ShoutoutsRole
    Properties:
      Role: !GetAtt ShoutoutsRole.Arn
      CodeUri: ../build/saver.zip
      Handler: saver
      Runtime: go1.x
      Tracing: Active
      MemorySize: 128
      Environment:
        Variables:
          TABLE_NAME: !Ref ShoutoutsTable

  ShoutoutMetricsFunction:
    Type: AWS::Serverless::Function
    DependsOn: ShoutoutsRole
    Properties:
      Role: !GetAtt ShoutoutsRole.Arn
      CodeUri: ../build/metrics.zip
      Handler: metrics
      Runtime: go1.x
      Tracing: Active
      MemorySize: 128
      Environment:
        Variables:
          METRIC_NAMESPACE: !Sub '{{resolve:ssm:/${paramsStackName}/metric-namespace:1}}'

  ShoutoutCallback:
    Type: AWS::Serverless::Function
    DependsOn: ShoutoutsRole
    Properties:
      Role: !GetAtt ShoutoutsRole.Arn
      CodeUri: ../build/callback.zip
      Handler: callback
      Runtime: go1.x
      Tracing: Active
      MemorySize: 128

  ShoutoutsStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt ShoutoutsStateMachineRole.Arn
      StateMachineName: !Sub ${AWS::StackName}-processor
      TracingConfiguration:
        Enabled: true
      DefinitionString: !Sub
        |-
        {
          "Comment": "Processes an incoming payload from the Shoutouts Slack Slash command.",
          "StartAt": "save",
          "Version": "1.0",
          "TimeoutSeconds": 90,
          "States":
          {
            "save": {
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ShoutoutSaverFunction}",
              "TimeoutSeconds": 30,
              "Next": "metrics"
            },
            "metrics": {
              "Type": "Task",
              "TimeoutSeconds": 30,
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ShoutoutMetricsFunction}",
              "Next": "callback"
            },
            "callback": {
              "Type": "Task",
              "TimeoutSeconds": 30,
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${ShoutoutCallback}",
              "End": true
            }
          }
        }

  ShoutoutsStateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [states.amazonaws.com]
          Action: ['sts:AssumeRole']
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-statemachine-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['lambda:InvokeFunction']
            Resource: '*' 
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

Outputs:
  ShoutoutsAPIEndpoint:
    Description: "API Gateway endpoint URL for Shoutouts service"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/shoutout/"
